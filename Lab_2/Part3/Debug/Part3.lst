
Debug/Part3.elf:     file format elf32-littlearm
Debug/Part3.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000c69

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00000d28 memsz 0x00000d28 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08000d28 align 2**15
         filesz 0x00000014 memsz 0x00000038 flags rw-
    LOAD off    0x00010038 vaddr 0x20000038 paddr 0x08000d3c align 2**15
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b88  08000198  08000198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d20  08000d20  00010014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000d20  08000d20  00008d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d24  08000d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000d28  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000014  08000d3c  00010014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000038  08000d3c  00010038  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000015f4  00000000  00000000  00010042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003c0  00000000  00000000  00011636  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000184  00000000  00000000  000119f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000e8  00000000  00000000  00011b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00011c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000005aa  00000000  00000000  00011d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000a54  00000000  00000000  000122d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000070  00000000  00000000  00012d26  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000001bc  00000000  00000000  00012d98  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000198 l    d  .text	00000000 .text
08000d20 l    d  .rodata	00000000 .rodata
08000d20 l    d  .init_array	00000000 .init_array
08000d24 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000014 l    d  .bss	00000000 .bss
20000038 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Debug/startup_stm32f411xe.o
08000c78 l       .text	00000000 LoopCopyDataInit
08000c70 l       .text	00000000 CopyDataInit
08000c8c l       .text	00000000 LoopFillZerobss
08000c86 l       .text	00000000 FillZerobss
08000cb8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08000d08 l     O .text	00000000 __EH_FRAME_BEGIN__
08000198 l     F .text	00000000 __do_global_dtors_aux
20000014 l       .bss	00000000 completed.8122
08000d24 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001bc l     F .text	00000000 frame_dummy
20000018 l       .bss	00000000 object.8127
08000d20 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 Part3.c
080001f4 l     F .text	00000034 __NVIC_EnableIRQ
08000228 l     F .text	0000004c __NVIC_SetPriority
08000274 l     F .text	00000020 __i2c_start
08000294 l     F .text	00000020 __i2c_stop
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /usr/local/Cellar/gcc-arm-none-eabi-49/20150925/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/softfp/crti.o
00000000 l    df *ABS*	00000000 /usr/local/Cellar/gcc-arm-none-eabi-49/20150925/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/softfp/crtn.o
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
20000014 l       .bss	00000000 __bss_start__
00000000 l       *UND*	00000000 __libc_fini_array
00000000 l       *UND*	00000000 __sf_fake_stderr
20000038 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 __call_exitprocs
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __sf_fake_stdin
08000d24 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 atexit
08000d20 l       .rodata	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 __sf_fake_stdout
08000d20 l       .init_array	00000000 __init_array_start
08000d20 l       .rodata	00000000 __preinit_array_start
08000cb8  w    F .text	00000002 RTC_Alarm_IRQHandler
08000cb8  w    F .text	00000002 EXTI2_IRQHandler
08000cb8  w    F .text	00000002 DebugMon_Handler
08000cb8  w    F .text	00000002 SPI4_IRQHandler
08000cb8  w    F .text	00000002 TIM1_CC_IRQHandler
08000cb8  w    F .text	00000002 DMA2_Stream5_IRQHandler
08000cb8  w    F .text	00000002 HardFault_Handler
08000cb8  w    F .text	00000002 DMA1_Stream5_IRQHandler
080003fc g     F .text	00000160 init_i2s3
08000cb8  w    F .text	00000002 SysTick_Handler
08000cb8  w    F .text	00000002 PVD_IRQHandler
08000cb8  w    F .text	00000002 SDIO_IRQHandler
08000cb8  w    F .text	00000002 TAMP_STAMP_IRQHandler
08000d28 g       *ABS*	00000000 _sidata
08000cb8  w    F .text	00000002 PendSV_Handler
08000cb8  w    F .text	00000002 NMI_Handler
08000d20 g       .rodata	00000000 __exidx_end
08000cb8  w    F .text	00000002 EXTI3_IRQHandler
080002b4 g     F .text	00000070 i2c_write
08000cb8  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08000d20 g       .text	00000000 _etext
20000014 g       .bss	00000000 _sbss
08000cb8  w    F .text	00000002 I2C3_ER_IRQHandler
20000034 g     O .bss	00000001 myState
08000844 g     F .text	00000070 EXTI0_IRQHandler
08000cb8  w    F .text	00000002 I2C2_EV_IRQHandler
08000cb8  w    F .text	00000002 DMA1_Stream2_IRQHandler
08000cb8  w    F .text	00000002 FPU_IRQHandler
20000010 g     O .data	00000004 SystemCoreClock
08000cb8  w    F .text	00000002 UsageFault_Handler
08000cb8  w    F .text	00000002 DMA2_Stream2_IRQHandler
20000000 g       .data	00000000 _sdata
08000cb8  w    F .text	00000002 SPI1_IRQHandler
08000cb8  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000d20 g       .rodata	00000000 __exidx_start
08000cb8  w    F .text	00000002 DMA2_Stream3_IRQHandler
08000cbc g     F .text	0000004c __libc_init_array
08000cb8  w    F .text	00000002 USART6_IRQHandler
08000d08 g     F .text	00000000 _init
20000038 g       .bss	00000000 _ebss
08000c68  w    F .text	00000038 Reset_Handler
08000cb8  w    F .text	00000002 DMA2_Stream0_IRQHandler
20000000 g     O .data	00000004 playing
08000810 g     F .text	00000034 TIM4_IRQHandler
00000000  w      *UND*	00000000 __deregister_frame_info
08000cb8  w    F .text	00000002 I2C1_EV_IRQHandler
08000cb8  w    F .text	00000002 DMA1_Stream6_IRQHandler
08000cb8  w    F .text	00000002 DMA1_Stream1_IRQHandler
080007c4 g     F .text	0000004c TIM3_IRQHandler
08000cb8  w    F .text	00000002 RCC_IRQHandler
08000cb8 g       .text	00000002 Default_Handler
08000cb8  w    F .text	00000002 EXTI15_10_IRQHandler
08000cb8  w    F .text	00000002 ADC_IRQHandler
08000cb8  w    F .text	00000002 DMA1_Stream7_IRQHandler
08000cb8  w    F .text	00000002 SPI5_IRQHandler
080006b0 g     F .text	00000080 start_cs43l22
08000cb8  w    F .text	00000002 TIM5_IRQHandler
08000cb8  w    F .text	00000002 DMA2_Stream7_IRQHandler
20000004 g     O .data	00000008 newScale
08000cb8  w    F .text	00000002 I2C3_EV_IRQHandler
08000cb8  w    F .text	00000002 EXTI9_5_IRQHandler
08000cb8  w    F .text	00000002 RTC_WKUP_IRQHandler
08000cb8  w    F .text	00000002 SPI2_IRQHandler
08000cb8  w    F .text	00000002 MemManage_Handler
080008b4 g     F .text	0000029c main
08000cb8  w    F .text	00000002 DMA1_Stream0_IRQHandler
08000324 g     F .text	00000098 i2c_read
08000cb8  w    F .text	00000002 SVC_Handler
0800055c g     F .text	00000154 init_cs43l22
20000030 g     O .bss	00000004 note
08000cb8  w    F .text	00000002 EXTI4_IRQHandler
08000b50 g     F .text	00000058 SystemInit
08000d14 g     F .text	00000000 _fini
08000cb8  w    F .text	00000002 WWDG_IRQHandler
08000744 g     F .text	00000080 TIM2_IRQHandler
08000ba8 g     F .text	000000c0 set_sysclk_to_100
08000cb8  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08000cb8  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
20020000 g       *ABS*	00000000 _estack
08000cb8  w    F .text	00000002 EXTI1_IRQHandler
20000014 g       .data	00000000 _edata
08000cb8  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000cb8  w    F .text	00000002 I2C2_ER_IRQHandler
08000cb8  w    F .text	00000002 DMA2_Stream1_IRQHandler
08000cb8  w    F .text	00000002 FLASH_IRQHandler
08000cb8  w    F .text	00000002 DMA2_Stream4_IRQHandler
08000cb8  w    F .text	00000002 BusFault_Handler
08000cb8  w    F .text	00000002 USART1_IRQHandler
080003bc g     F .text	00000040 init_i2s_pll
08000cb8  w    F .text	00000002 OTG_FS_IRQHandler
08000cb8  w    F .text	00000002 SPI3_IRQHandler
08000cb8  w    F .text	00000002 DMA1_Stream4_IRQHandler
2000000c g     O .data	00000001 DeviceAddr
08000730 g     F .text	00000014 I2C1_ER_IRQHandler
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00000000  w      *UND*	00000000 __register_frame_info
08000cb8  w    F .text	00000002 DMA2_Stream6_IRQHandler
08000cb8  w    F .text	00000002 DMA1_Stream3_IRQHandler



Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d08 	.word	0x08000d08

080001bc <frame_dummy>:
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <frame_dummy+0x24>)
 80001be:	b510      	push	{r4, lr}
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <frame_dummy+0x28>)
 80001c4:	4908      	ldr	r1, [pc, #32]	; (80001e8 <frame_dummy+0x2c>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <frame_dummy+0x30>)
 80001cc:	6803      	ldr	r3, [r0, #0]
 80001ce:	b903      	cbnz	r3, 80001d2 <frame_dummy+0x16>
 80001d0:	bd10      	pop	{r4, pc}
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <frame_dummy+0x34>)
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d0fb      	beq.n	80001d0 <frame_dummy+0x14>
 80001d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001dc:	4718      	bx	r3
 80001de:	bf00      	nop
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d08 	.word	0x08000d08
 80001e8:	20000018 	.word	0x20000018
 80001ec:	20000014 	.word	0x20000014
 80001f0:	00000000 	.word	0x00000000

080001f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f4:	b082      	sub	sp, #8
 80001f6:	4603      	mov	r3, r0
 80001f8:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000200:	2b00      	cmp	r3, #0
 8000202:	db0c      	blt.n	800021e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000204:	4907      	ldr	r1, [pc, #28]	; (8000224 <__NVIC_EnableIRQ+0x30>)
 8000206:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000210:	f002 021f 	and.w	r2, r2, #31
 8000214:	2001      	movs	r0, #1
 8000216:	fa00 f202 	lsl.w	r2, r0, r2
 800021a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800021e:	b002      	add	sp, #8
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000228:	b082      	sub	sp, #8
 800022a:	4603      	mov	r3, r0
 800022c:	9100      	str	r1, [sp, #0]
 800022e:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8000232:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000236:	2b00      	cmp	r3, #0
 8000238:	db0a      	blt.n	8000250 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x44>)
 800023c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000240:	9a00      	ldr	r2, [sp, #0]
 8000242:	b2d2      	uxtb	r2, r2
 8000244:	0112      	lsls	r2, r2, #4
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	440b      	add	r3, r1
 800024a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800024e:	e00b      	b.n	8000268 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	4907      	ldr	r1, [pc, #28]	; (8000270 <__NVIC_SetPriority+0x48>)
 8000252:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	9a00      	ldr	r2, [sp, #0]
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	0112      	lsls	r2, r2, #4
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	440b      	add	r3, r1
 8000266:	761a      	strb	r2, [r3, #24]
  }
}
 8000268:	b002      	add	sp, #8
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__i2c_start>:
* I2C related general functions
*************************************************/
volatile uint8_t DeviceAddr = CS43L22_ADDRESS;

static inline void __i2c_start() {
    I2C1->CR1 |= I2C_CR1_START;
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <__i2c_start+0x1c>)
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <__i2c_start+0x1c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000280:	bf00      	nop
 8000282:	4b03      	ldr	r3, [pc, #12]	; (8000290 <__i2c_start+0x1c>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <__i2c_start+0xe>
}
 800028e:	4770      	bx	lr
 8000290:	40005400 	.word	0x40005400

08000294 <__i2c_stop>:

static inline void __i2c_stop() {
    I2C1->CR1 |= I2C_CR1_STOP;
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <__i2c_stop+0x1c>)
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <__i2c_stop+0x1c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800029e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 80002a0:	bf00      	nop
 80002a2:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <__i2c_stop+0x1c>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0302 	and.w	r3, r3, #2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <__i2c_stop+0xe>
}
 80002ae:	4770      	bx	lr
 80002b0:	40005400 	.word	0x40005400

080002b4 <i2c_write>:

void i2c_write(uint8_t regaddr, uint8_t data) {
 80002b4:	b500      	push	{lr}
 80002b6:	b083      	sub	sp, #12
 80002b8:	4603      	mov	r3, r0
 80002ba:	460a      	mov	r2, r1
 80002bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	f88d 3006 	strb.w	r3, [sp, #6]
    // send start condition
    __i2c_start();
 80002c6:	f7ff ffd5 	bl	8000274 <__i2c_start>

    // send chipaddr in write mode
    // wait until address is sent
    I2C1->DR = DeviceAddr;
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <i2c_write+0x68>)
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <i2c_write+0x6c>)
 80002ce:	7812      	ldrb	r2, [r2, #0]
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002d4:	bf00      	nop
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <i2c_write+0x68>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0302 	and.w	r3, r3, #2
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <i2c_write+0x22>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <i2c_write+0x68>)
 80002e4:	699b      	ldr	r3, [r3, #24]

    // send MAP byte with auto increment off
    // wait until byte transfer complete (BTF)
    I2C1->DR = regaddr;
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <i2c_write+0x68>)
 80002e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80002ec:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80002ee:	bf00      	nop
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <i2c_write+0x68>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <i2c_write+0x3c>

    // send data
    // wait until byte transfer complete
    I2C1->DR = data;
 80002fc:	4a07      	ldr	r2, [pc, #28]	; (800031c <i2c_write+0x68>)
 80002fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000302:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000304:	bf00      	nop
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <i2c_write+0x68>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <i2c_write+0x52>

    // send stop condition
    __i2c_stop();
 8000312:	f7ff ffbf 	bl	8000294 <__i2c_stop>
}
 8000316:	b003      	add	sp, #12
 8000318:	f85d fb04 	ldr.w	pc, [sp], #4
 800031c:	40005400 	.word	0x40005400
 8000320:	2000000c 	.word	0x2000000c

08000324 <i2c_read>:

uint8_t i2c_read(uint8_t regaddr) {
 8000324:	b500      	push	{lr}
 8000326:	b085      	sub	sp, #20
 8000328:	4603      	mov	r3, r0
 800032a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t reg;

    // send start condition
    __i2c_start();
 800032e:	f7ff ffa1 	bl	8000274 <__i2c_start>

    // send chipaddr in write mode
    // wait until address is sent
    I2C1->DR = DeviceAddr;
 8000332:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <i2c_read+0x90>)
 8000334:	4a20      	ldr	r2, [pc, #128]	; (80003b8 <i2c_read+0x94>)
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800033c:	bf00      	nop
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <i2c_read+0x90>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <i2c_read+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <i2c_read+0x90>)
 800034c:	699b      	ldr	r3, [r3, #24]

    // send MAP byte with auto increment off
    // wait until byte transfer complete (BTF)
    I2C1->DR = regaddr;
 800034e:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <i2c_read+0x90>)
 8000350:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000354:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000356:	bf00      	nop
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <i2c_read+0x90>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <i2c_read+0x34>

    // restart transmission by sending stop & start
    __i2c_stop();
 8000364:	f7ff ff96 	bl	8000294 <__i2c_stop>
    __i2c_start();
 8000368:	f7ff ff84 	bl	8000274 <__i2c_start>

    // send chipaddr in read mode. LSB is 1
    // wait until address is sent
    I2C1->DR = DeviceAddr | 0x01; // read
 800036c:	4a11      	ldr	r2, [pc, #68]	; (80003b4 <i2c_read+0x90>)
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <i2c_read+0x94>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800037c:	bf00      	nop
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <i2c_read+0x90>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f003 0302 	and.w	r3, r3, #2
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f9      	beq.n	800037e <i2c_read+0x5a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <i2c_read+0x90>)
 800038c:	699b      	ldr	r3, [r3, #24]

    // wait until receive buffer is not empty
    while (!(I2C1->SR1 & I2C_SR1_RXNE));
 800038e:	bf00      	nop
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <i2c_read+0x90>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <i2c_read+0x6c>
    // read content
    reg = (uint8_t)I2C1->DR;
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <i2c_read+0x90>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	f88d 300f 	strb.w	r3, [sp, #15]

    // send stop condition
    __i2c_stop();
 80003a4:	f7ff ff76 	bl	8000294 <__i2c_stop>

    return reg;
 80003a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	b005      	add	sp, #20
 80003b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80003b4:	40005400 	.word	0x40005400
 80003b8:	2000000c 	.word	0x2000000c

080003bc <init_i2s_pll>:
void init_i2s_pll() {
    // enable PLL I2S for 48khz Fs
    // for VCO = 1Mhz (8Mhz / M = 8Mhz / 8)
    // I2SxCLK = VCO x N / R
    // for N = 258, R = 3 => I2SxCLK = 86Mhz
    RCC->PLLI2SCFGR |= (258 << 6); // N value = 258
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <init_i2s_pll+0x3c>)
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <init_i2s_pll+0x3c>)
 80003c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80003c4:	f443 4381 	orr.w	r3, r3, #16512	; 0x4080
 80003c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    RCC->PLLI2SCFGR |= (3 << 28); // R value = 3
 80003cc:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <init_i2s_pll+0x3c>)
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <init_i2s_pll+0x3c>)
 80003d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80003d4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80003d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    RCC->CR |= (1 << 26); // enable PLLI2SON
 80003dc:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <init_i2s_pll+0x3c>)
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <init_i2s_pll+0x3c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003e6:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & (1 << 27))); // wait until PLLI2SRDY
 80003e8:	bf00      	nop
 80003ea:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <init_i2s_pll+0x3c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <init_i2s_pll+0x2e>
}
 80003f6:	4770      	bx	lr
 80003f8:	40023800 	.word	0x40023800

080003fc <init_i2s3>:
 * Pins are connected to
 * PC7 - MCLK, PC10 - SCK, PC12 - SD, PA4 - WS
 */
void init_i2s3() {
    // Setup pins PC7 - MCLK, PC10 - SCK, PC12 - SD, PA4 - WS
    RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN);
 80003fc:	4a53      	ldr	r2, [pc, #332]	; (800054c <init_i2s3+0x150>)
 80003fe:	4b53      	ldr	r3, [pc, #332]	; (800054c <init_i2s3+0x150>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	f043 0305 	orr.w	r3, r3, #5
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000408:	4a50      	ldr	r2, [pc, #320]	; (800054c <init_i2s3+0x150>)
 800040a:	4b50      	ldr	r3, [pc, #320]	; (800054c <init_i2s3+0x150>)
 800040c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000412:	6413      	str	r3, [r2, #64]	; 0x40
    // PC7 alternate function mode MCLK
    GPIOC->MODER   &= ~(3U << 7*2);
 8000414:	4a4e      	ldr	r2, [pc, #312]	; (8000550 <init_i2s3+0x154>)
 8000416:	4b4e      	ldr	r3, [pc, #312]	; (8000550 <init_i2s3+0x154>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800041e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER   |= (2 << 7*2);
 8000420:	4a4b      	ldr	r2, [pc, #300]	; (8000550 <init_i2s3+0x154>)
 8000422:	4b4b      	ldr	r3, [pc, #300]	; (8000550 <init_i2s3+0x154>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800042a:	6013      	str	r3, [r2, #0]
    GPIOC->OSPEEDR |= (3 << 7*2);
 800042c:	4a48      	ldr	r2, [pc, #288]	; (8000550 <init_i2s3+0x154>)
 800042e:	4b48      	ldr	r3, [pc, #288]	; (8000550 <init_i2s3+0x154>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000436:	6093      	str	r3, [r2, #8]
    GPIOC->AFR[0]  |= (6 << 7*4);
 8000438:	4a45      	ldr	r2, [pc, #276]	; (8000550 <init_i2s3+0x154>)
 800043a:	4b45      	ldr	r3, [pc, #276]	; (8000550 <init_i2s3+0x154>)
 800043c:	6a1b      	ldr	r3, [r3, #32]
 800043e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8000442:	6213      	str	r3, [r2, #32]
    // PC10 alternate function mode SCL
    GPIOC->MODER   &= ~(3U << 10*2);
 8000444:	4a42      	ldr	r2, [pc, #264]	; (8000550 <init_i2s3+0x154>)
 8000446:	4b42      	ldr	r3, [pc, #264]	; (8000550 <init_i2s3+0x154>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800044e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER   |= (2 << 10*2);
 8000450:	4a3f      	ldr	r2, [pc, #252]	; (8000550 <init_i2s3+0x154>)
 8000452:	4b3f      	ldr	r3, [pc, #252]	; (8000550 <init_i2s3+0x154>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800045a:	6013      	str	r3, [r2, #0]
    GPIOC->OSPEEDR |= (3 << 10*2);
 800045c:	4a3c      	ldr	r2, [pc, #240]	; (8000550 <init_i2s3+0x154>)
 800045e:	4b3c      	ldr	r3, [pc, #240]	; (8000550 <init_i2s3+0x154>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000466:	6093      	str	r3, [r2, #8]
    GPIOC->AFR[1]  |= (6 << (10-8)*4);
 8000468:	4a39      	ldr	r2, [pc, #228]	; (8000550 <init_i2s3+0x154>)
 800046a:	4b39      	ldr	r3, [pc, #228]	; (8000550 <init_i2s3+0x154>)
 800046c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000472:	6253      	str	r3, [r2, #36]	; 0x24
    // PC12 alternate function mode SD
    GPIOC->MODER   &= ~(3U << 12*2);
 8000474:	4a36      	ldr	r2, [pc, #216]	; (8000550 <init_i2s3+0x154>)
 8000476:	4b36      	ldr	r3, [pc, #216]	; (8000550 <init_i2s3+0x154>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800047e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER   |= (2 << 12*2);
 8000480:	4a33      	ldr	r2, [pc, #204]	; (8000550 <init_i2s3+0x154>)
 8000482:	4b33      	ldr	r3, [pc, #204]	; (8000550 <init_i2s3+0x154>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	6013      	str	r3, [r2, #0]
    GPIOC->OSPEEDR |= (3 << 12*2);
 800048c:	4a30      	ldr	r2, [pc, #192]	; (8000550 <init_i2s3+0x154>)
 800048e:	4b30      	ldr	r3, [pc, #192]	; (8000550 <init_i2s3+0x154>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000496:	6093      	str	r3, [r2, #8]
    GPIOC->AFR[1]  |= (6 << (12-8)*4);
 8000498:	4a2d      	ldr	r2, [pc, #180]	; (8000550 <init_i2s3+0x154>)
 800049a:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <init_i2s3+0x154>)
 800049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049e:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80004a2:	6253      	str	r3, [r2, #36]	; 0x24
    // PA4 alternate function mode WS
    GPIOA->MODER   &= ~(3U << 4*2);
 80004a4:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <init_i2s3+0x158>)
 80004a6:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <init_i2s3+0x158>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ae:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |= (2 << 4*2);
 80004b0:	4a28      	ldr	r2, [pc, #160]	; (8000554 <init_i2s3+0x158>)
 80004b2:	4b28      	ldr	r3, [pc, #160]	; (8000554 <init_i2s3+0x158>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ba:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= (3 << 4*2);
 80004bc:	4a25      	ldr	r2, [pc, #148]	; (8000554 <init_i2s3+0x158>)
 80004be:	4b25      	ldr	r3, [pc, #148]	; (8000554 <init_i2s3+0x158>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004c6:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0]  |= (6 << 4*4);
 80004c8:	4a22      	ldr	r2, [pc, #136]	; (8000554 <init_i2s3+0x158>)
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <init_i2s3+0x158>)
 80004cc:	6a1b      	ldr	r3, [r3, #32]
 80004ce:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80004d2:	6213      	str	r3, [r2, #32]

    // Configure I2S
    SPI3->I2SCFGR = 0; // reset registers
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <init_i2s3+0x15c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
    SPI3->I2SPR   = 0; // reset registers
 80004da:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <init_i2s3+0x15c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
    SPI3->I2SCFGR |= (1 << 11); // I2S mode is selected
 80004e0:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <init_i2s3+0x15c>)
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <init_i2s3+0x15c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004ea:	61d3      	str	r3, [r2, #28]
    // I2S config mode
    // 10 - Master Transmit
    // 11 - Master Receive
    // Since we will just use built-in beep, we can set it up as receive
    // mode to always activate clock.
    SPI3->I2SCFGR |= (3 << 8);
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <init_i2s3+0x15c>)
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <init_i2s3+0x15c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004f6:	61d3      	str	r3, [r2, #28]

    // have no effect
    SPI3->I2SCFGR |= (0 << 7);  // PCM frame sync, 0 - short frame
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <init_i2s3+0x15c>)
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <init_i2s3+0x15c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	61d3      	str	r3, [r2, #28]
    SPI3->I2SCFGR |= (0 << 4);  // I2S standard select, 00 Philips standard, 11 PCM standard
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <init_i2s3+0x15c>)
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <init_i2s3+0x15c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	61d3      	str	r3, [r2, #28]
    SPI3->I2SCFGR |= (0 << 3);  // Steady state clock polarity, 0 - low, 1 - high
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <init_i2s3+0x15c>)
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <init_i2s3+0x15c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	61d3      	str	r3, [r2, #28]
    SPI3->I2SCFGR |= (0 << 0);  // Channel length, 0 - 16bit, 1 - 32bit
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <init_i2s3+0x15c>)
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <init_i2s3+0x15c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	61d3      	str	r3, [r2, #28]

    SPI3->I2SPR |= (1 << 9); // Master clock output enable
 8000518:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <init_i2s3+0x15c>)
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <init_i2s3+0x15c>)
 800051c:	6a1b      	ldr	r3, [r3, #32]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6213      	str	r3, [r2, #32]
    // 48 Khz
    SPI3->I2SPR |= (1 << 8); // Odd factor for the prescaler (I2SODD)
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <init_i2s3+0x15c>)
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <init_i2s3+0x15c>)
 8000528:	6a1b      	ldr	r3, [r3, #32]
 800052a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052e:	6213      	str	r3, [r2, #32]
    SPI3->I2SPR |= (3 << 0); // Linear prescaler (I2SDIV)
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <init_i2s3+0x15c>)
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <init_i2s3+0x15c>)
 8000534:	6a1b      	ldr	r3, [r3, #32]
 8000536:	f043 0303 	orr.w	r3, r3, #3
 800053a:	6213      	str	r3, [r2, #32]

    SPI3->I2SCFGR |= (1 << 10); // I2S enabled
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <init_i2s3+0x15c>)
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <init_i2s3+0x15c>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000546:	61d3      	str	r3, [r2, #28]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	40020800 	.word	0x40020800
 8000554:	40020000 	.word	0x40020000
 8000558:	40003c00 	.word	0x40003c00

0800055c <init_cs43l22>:

/*************************************************
* CS43L22 related functions
*************************************************/

void init_cs43l22(uint8_t an_ch) {
 800055c:	b500      	push	{lr}
 800055e:	b085      	sub	sp, #20
 8000560:	4603      	mov	r3, r0
 8000562:	f88d 3007 	strb.w	r3, [sp, #7]
    // setup reset pin for CS43L22 - GPIOD 4
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000566:	4a50      	ldr	r2, [pc, #320]	; (80006a8 <init_cs43l22+0x14c>)
 8000568:	4b4f      	ldr	r3, [pc, #316]	; (80006a8 <init_cs43l22+0x14c>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOD->MODER &= ~(3U << 4*2);
 8000572:	4a4e      	ldr	r2, [pc, #312]	; (80006ac <init_cs43l22+0x150>)
 8000574:	4b4d      	ldr	r3, [pc, #308]	; (80006ac <init_cs43l22+0x150>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800057c:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (1 << 4*2);
 800057e:	4a4b      	ldr	r2, [pc, #300]	; (80006ac <init_cs43l22+0x150>)
 8000580:	4b4a      	ldr	r3, [pc, #296]	; (80006ac <init_cs43l22+0x150>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000588:	6013      	str	r3, [r2, #0]
    // activate CS43L22
    GPIOD->ODR   |=  (1 << 4);
 800058a:	4a48      	ldr	r2, [pc, #288]	; (80006ac <init_cs43l22+0x150>)
 800058c:	4b47      	ldr	r3, [pc, #284]	; (80006ac <init_cs43l22+0x150>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6153      	str	r3, [r2, #20]

    uint8_t data;
    // power off
    i2c_write(CS43L22_REG_POWER_CTL1, CS43L22_PWR_CTRL1_POWER_DOWN);
 8000596:	2002      	movs	r0, #2
 8000598:	2101      	movs	r1, #1
 800059a:	f7ff fe8b 	bl	80002b4 <i2c_write>

    // headphones on, speakers off
    data = (2 << 6) | (2 << 4) | (3 << 2) | (3 << 0);
 800059e:	23af      	movs	r3, #175	; 0xaf
 80005a0:	f88d 300f 	strb.w	r3, [sp, #15]
    i2c_write(CS43L22_REG_POWER_CTL2, data);
 80005a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80005a8:	2004      	movs	r0, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	f7ff fe82 	bl	80002b4 <i2c_write>

    // auto detect clock
    data = (1 << 7);
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	f88d 300f 	strb.w	r3, [sp, #15]
    i2c_write(CS43L22_REG_CLOCKING_CTL, data);
 80005b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80005ba:	2005      	movs	r0, #5
 80005bc:	4619      	mov	r1, r3
 80005be:	f7ff fe79 	bl	80002b4 <i2c_write>

    // slave mode, DSP mode disabled, I2S data format, 16-bit data
    data = (1 << 2) | (3 << 0);
 80005c2:	2307      	movs	r3, #7
 80005c4:	f88d 300f 	strb.w	r3, [sp, #15]
    i2c_write(CS43L22_REG_INTERFACE_CTL1, data);
 80005c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80005cc:	2006      	movs	r0, #6
 80005ce:	4619      	mov	r1, r3
 80005d0:	f7ff fe70 	bl	80002b4 <i2c_write>

    // select ANx as passthrough source based on the parameter passed
    if ((an_ch > 0) && (an_ch < 5)) {
 80005d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00c      	beq.n	80005f6 <init_cs43l22+0x9a>
 80005dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d808      	bhi.n	80005f6 <init_cs43l22+0x9a>
        data = (uint8_t)(1 << (an_ch-1));
 80005e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	2201      	movs	r2, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	f88d 300f 	strb.w	r3, [sp, #15]
 80005f4:	e002      	b.n	80005fc <init_cs43l22+0xa0>
    }
    else {
        data = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    i2c_write(CS43L22_REG_PASSTHR_A_SELECT, data);
 80005fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000600:	2008      	movs	r0, #8
 8000602:	4619      	mov	r1, r3
 8000604:	f7ff fe56 	bl	80002b4 <i2c_write>
    i2c_write(CS43L22_REG_PASSTHR_B_SELECT, data);
 8000608:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800060c:	2009      	movs	r0, #9
 800060e:	4619      	mov	r1, r3
 8000610:	f7ff fe50 	bl	80002b4 <i2c_write>

    // ganged control of both channels
    data = (1 << 7);
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	f88d 300f 	strb.w	r3, [sp, #15]
    i2c_write(CS43L22_REG_PASSTHR_GANG_CTL, data);
 800061a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800061e:	200c      	movs	r0, #12
 8000620:	4619      	mov	r1, r3
 8000622:	f7ff fe47 	bl	80002b4 <i2c_write>

    // playback control 1
    // hp gain 0.6, single control, master playback
    data = (3 << 5) | (1 << 4);
 8000626:	2370      	movs	r3, #112	; 0x70
 8000628:	f88d 300f 	strb.w	r3, [sp, #15]
    i2c_write(CS43L22_REG_PLAYBACK_CTL1, data);
 800062c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000630:	200d      	movs	r0, #13
 8000632:	4619      	mov	r1, r3
 8000634:	f7ff fe3e 	bl	80002b4 <i2c_write>

    // misc controls,
    // passthrough analog enable/disable
    // passthrough mute/unmute
    if ((an_ch > 0) && (an_ch < 5)) {
 8000638:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d007      	beq.n	8000650 <init_cs43l22+0xf4>
 8000640:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000644:	2b04      	cmp	r3, #4
 8000646:	d803      	bhi.n	8000650 <init_cs43l22+0xf4>
        data = (1 << 7) | (1 << 6);
 8000648:	23c0      	movs	r3, #192	; 0xc0
 800064a:	f88d 300f 	strb.w	r3, [sp, #15]
 800064e:	e002      	b.n	8000656 <init_cs43l22+0xfa>
    }
    else {
        data = (1 << 5) | (1 << 4); // mute
 8000650:	2330      	movs	r3, #48	; 0x30
 8000652:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    i2c_write(CS43L22_REG_MISC_CTL, data);
 8000656:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800065a:	200e      	movs	r0, #14
 800065c:	4619      	mov	r1, r3
 800065e:	f7ff fe29 	bl	80002b4 <i2c_write>

    // passthrough volume
    data = 0; // 0 dB
 8000662:	2300      	movs	r3, #0
 8000664:	f88d 300f 	strb.w	r3, [sp, #15]
    i2c_write(CS43L22_REG_PASSTHR_A_VOL, data);
 8000668:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800066c:	2014      	movs	r0, #20
 800066e:	4619      	mov	r1, r3
 8000670:	f7ff fe20 	bl	80002b4 <i2c_write>
    i2c_write(CS43L22_REG_PASSTHR_B_VOL, data);
 8000674:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000678:	2015      	movs	r0, #21
 800067a:	4619      	mov	r1, r3
 800067c:	f7ff fe1a 	bl	80002b4 <i2c_write>

    // pcm volume
    data = 0; // 0 dB
 8000680:	2300      	movs	r3, #0
 8000682:	f88d 300f 	strb.w	r3, [sp, #15]
    i2c_write(CS43L22_REG_PCMA_VOL, data);
 8000686:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800068a:	201a      	movs	r0, #26
 800068c:	4619      	mov	r1, r3
 800068e:	f7ff fe11 	bl	80002b4 <i2c_write>
    i2c_write(CS43L22_REG_PCMB_VOL, data);
 8000692:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000696:	201b      	movs	r0, #27
 8000698:	4619      	mov	r1, r3
 800069a:	f7ff fe0b 	bl	80002b4 <i2c_write>

    start_cs43l22();
 800069e:	f000 f807 	bl	80006b0 <start_cs43l22>
}
 80006a2:	b005      	add	sp, #20
 80006a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020c00 	.word	0x40020c00

080006b0 <start_cs43l22>:

void start_cs43l22() {
 80006b0:	b500      	push	{lr}
 80006b2:	b083      	sub	sp, #12
    // initialization sequence from the data sheet pg 32
    // write 0x99 to register 0x00
    i2c_write(0x00, 0x99);
 80006b4:	2000      	movs	r0, #0
 80006b6:	2199      	movs	r1, #153	; 0x99
 80006b8:	f7ff fdfc 	bl	80002b4 <i2c_write>
    // write 0x80 to register 0x47
    i2c_write(0x47, 0x80);
 80006bc:	2047      	movs	r0, #71	; 0x47
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	f7ff fdf8 	bl	80002b4 <i2c_write>
    // write 1 to bit 7 in register 0x32
    uint8_t data = i2c_read(0x32);
 80006c4:	2032      	movs	r0, #50	; 0x32
 80006c6:	f7ff fe2d 	bl	8000324 <i2c_read>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f88d 3007 	strb.w	r3, [sp, #7]
    data |= (1 << 7);
 80006d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006d8:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_write(0x32, data);
 80006dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006e0:	2032      	movs	r0, #50	; 0x32
 80006e2:	4619      	mov	r1, r3
 80006e4:	f7ff fde6 	bl	80002b4 <i2c_write>
    // write 0 to bit 7 in register 0x32
    data &= (uint8_t)(~(1U << 7));
 80006e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f0:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_write(0x32, data);
 80006f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	4619      	mov	r1, r3
 80006fc:	f7ff fdda 	bl	80002b4 <i2c_write>
    // write 0x00 to register 0x00
    i2c_write(0, 0x00);
 8000700:	2000      	movs	r0, #0
 8000702:	2100      	movs	r1, #0
 8000704:	f7ff fdd6 	bl	80002b4 <i2c_write>

    // power on
    i2c_write(CS43L22_REG_POWER_CTL1, CS43L22_PWR_CTRL1_POWER_UP);
 8000708:	2002      	movs	r0, #2
 800070a:	219e      	movs	r1, #158	; 0x9e
 800070c:	f7ff fdd2 	bl	80002b4 <i2c_write>
    // wait little bit
    for (volatile int i=0; i<500000; i++);
 8000710:	2300      	movs	r3, #0
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	e002      	b.n	800071c <start_cs43l22+0x6c>
 8000716:	9b00      	ldr	r3, [sp, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	9b00      	ldr	r3, [sp, #0]
 800071e:	4a03      	ldr	r2, [pc, #12]	; (800072c <start_cs43l22+0x7c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	ddf8      	ble.n	8000716 <start_cs43l22+0x66>
}
 8000724:	b003      	add	sp, #12
 8000726:	f85d fb04 	ldr.w	pc, [sp], #4
 800072a:	bf00      	nop
 800072c:	0007a11f 	.word	0x0007a11f

08000730 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(){
    // error handler
    GPIOD->ODR |= (1 << 14); // red LED
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <I2C1_ER_IRQHandler+0x10>)
 8000732:	4b03      	ldr	r3, [pc, #12]	; (8000740 <I2C1_ER_IRQHandler+0x10>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6153      	str	r3, [r2, #20]
}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40020c00 	.word	0x40020c00

08000744 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) //play the notes in the scale array on loop, called every 0.5 seconds
{
 8000744:	b508      	push	{r3, lr}
    
    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 8000746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00e      	beq.n	8000772 <TIM2_IRQHandler+0x2e>
        if (TIM2->SR & 0x01) {
 8000754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	2b00      	cmp	r3, #0
 8000760:	d007      	beq.n	8000772 <TIM2_IRQHandler+0x2e>
            TIM2->SR &= ~(1U << 0);
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	6113      	str	r3, [r2, #16]
        }
    }
    if(playing == 1) //only change the note if scale isn't paused
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <TIM2_IRQHandler+0x74>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d11c      	bne.n	80007b4 <TIM2_IRQHandler+0x70>
    {
            i2c_write(CS43L22_REG_BEEP_TONE_CFG, 0x0);
 800077a:	201e      	movs	r0, #30
 800077c:	2100      	movs	r1, #0
 800077e:	f7ff fd99 	bl	80002b4 <i2c_write>
            i2c_write(CS43L22_REG_BEEP_FREQ_ON_TIME, newScale[note]);
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <TIM2_IRQHandler+0x78>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <TIM2_IRQHandler+0x7c>)
 8000788:	5cd3      	ldrb	r3, [r2, r3]
 800078a:	201c      	movs	r0, #28
 800078c:	4619      	mov	r1, r3
 800078e:	f7ff fd91 	bl	80002b4 <i2c_write>
            i2c_write(CS43L22_REG_BEEP_TONE_CFG, 0xE0); //enable a continous beep
 8000792:	201e      	movs	r0, #30
 8000794:	21e0      	movs	r1, #224	; 0xe0
 8000796:	f7ff fd8d 	bl	80002b4 <i2c_write>

            if(note == 7) //changes array pos to next note
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <TIM2_IRQHandler+0x78>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b07      	cmp	r3, #7
 80007a0:	d103      	bne.n	80007aa <TIM2_IRQHandler+0x66>
            {
                note = 0;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <TIM2_IRQHandler+0x78>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e004      	b.n	80007b4 <TIM2_IRQHandler+0x70>
            }
            else
            {
                note++;
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <TIM2_IRQHandler+0x78>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a02      	ldr	r2, [pc, #8]	; (80007bc <TIM2_IRQHandler+0x78>)
 80007b2:	6013      	str	r3, [r2, #0]
            }
    }    
}
 80007b4:	bd08      	pop	{r3, pc}
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000030 	.word	0x20000030
 80007c0:	20000004 	.word	0x20000004

080007c4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) //triggers after 0.3 seconds, pauses the sequence if no second click has been registered
{
    
    // clear interrupt status
    if (TIM3->DIER & 0x01) {
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <TIM3_IRQHandler+0x40>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00b      	beq.n	80007e8 <TIM3_IRQHandler+0x24>
        if (TIM3->SR & 0x01) {
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <TIM3_IRQHandler+0x40>)
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <TIM3_IRQHandler+0x24>
            TIM3->SR &= ~(1U << 0);
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <TIM3_IRQHandler+0x40>)
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <TIM3_IRQHandler+0x40>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	f023 0301 	bic.w	r3, r3, #1
 80007e6:	6113      	str	r3, [r2, #16]
        }
    }

    if(myState == FIRST_PRESS_DEBOUNCE)
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <TIM3_IRQHandler+0x44>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d108      	bne.n	8000802 <TIM3_IRQHandler+0x3e>
    {
        playing ^= 1; //toggle paused
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <TIM3_IRQHandler+0x48>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <TIM3_IRQHandler+0x48>)
 80007fa:	6013      	str	r3, [r2, #0]
        myState = NO_PRESS; //reset program state
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <TIM3_IRQHandler+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
    }
}
 8000802:	4770      	bx	lr
 8000804:	40000400 	.word	0x40000400
 8000808:	20000034 	.word	0x20000034
 800080c:	20000000 	.word	0x20000000

08000810 <TIM4_IRQHandler>:
//by interrupt triggers that happen less that 10ms after the first click is registerd
void TIM4_IRQHandler(void) 
{                          
    
    // clear interrupt status
    if (TIM4->DIER & 0x01) {
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <TIM4_IRQHandler+0x2c>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00b      	beq.n	8000834 <TIM4_IRQHandler+0x24>
        if (TIM4->SR & 0x01) {
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <TIM4_IRQHandler+0x2c>)
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d005      	beq.n	8000834 <TIM4_IRQHandler+0x24>
            TIM4->SR &= ~(1U << 0);
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <TIM4_IRQHandler+0x2c>)
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <TIM4_IRQHandler+0x2c>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	f023 0301 	bic.w	r3, r3, #1
 8000832:	6113      	str	r3, [r2, #16]
        }
    }

    myState = FIRST_PRESS_DEBOUNCE;
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <TIM4_IRQHandler+0x30>)
 8000836:	2202      	movs	r2, #2
 8000838:	701a      	strb	r2, [r3, #0]
}
 800083a:	4770      	bx	lr
 800083c:	40000800 	.word	0x40000800
 8000840:	20000034 	.word	0x20000034

08000844 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{

    // Check if the interrupt came from exti0
    if (EXTI->PR & (1 << 0))
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <EXTI0_IRQHandler+0x58>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d023      	beq.n	8000898 <EXTI0_IRQHandler+0x54>
    {
        EXTI->PR = (1 << 0); //clear the interrupt
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <EXTI0_IRQHandler+0x58>)
 8000852:	2201      	movs	r2, #1
 8000854:	615a      	str	r2, [r3, #20]
        if(myState == NO_PRESS)
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <EXTI0_IRQHandler+0x5c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10f      	bne.n	800087e <EXTI0_IRQHandler+0x3a>
        {
            TIM3->CR1 |= (1 << 0) | (1 << 3); //calls the "first click" timert
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <EXTI0_IRQHandler+0x60>)
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <EXTI0_IRQHandler+0x60>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f043 0309 	orr.w	r3, r3, #9
 8000868:	6013      	str	r3, [r2, #0]
            TIM4->CR1 |= (1 << 0) | (1 << 3); //calls the debouncing timer
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <EXTI0_IRQHandler+0x64>)
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <EXTI0_IRQHandler+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f043 0309 	orr.w	r3, r3, #9
 8000874:	6013      	str	r3, [r2, #0]
            myState = FIRST_PRESS;
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <EXTI0_IRQHandler+0x5c>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e00c      	b.n	8000898 <EXTI0_IRQHandler+0x54>
        }
        else if(myState == FIRST_PRESS_DEBOUNCE) //detects if there was a second click after 10ms 
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <EXTI0_IRQHandler+0x5c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d108      	bne.n	8000898 <EXTI0_IRQHandler+0x54>
        {
            myState = NO_PRESS; //resets program state
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <EXTI0_IRQHandler+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
            note = 0; //restarts and plays scale
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <EXTI0_IRQHandler+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
            playing = 1;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <EXTI0_IRQHandler+0x6c>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
        }
    }

    return;
 8000898:	bf00      	nop
}
 800089a:	4770      	bx	lr
 800089c:	40013c00 	.word	0x40013c00
 80008a0:	20000034 	.word	0x20000034
 80008a4:	40000400 	.word	0x40000400
 80008a8:	40000800 	.word	0x40000800
 80008ac:	20000030 	.word	0x20000030
 80008b0:	20000000 	.word	0x20000000

080008b4 <main>:

/*************************************************
* main code starts from here
*************************************************/
int main(void)
{
 80008b4:	b500      	push	{lr}
 80008b6:	b083      	sub	sp, #12
    /* set system clock to 168 Mhz */
    set_sysclk_to_100();
 80008b8:	f000 f976 	bl	8000ba8 <set_sysclk_to_100>

    //*******************************
    // setup LEDs - GPIOD 12,13,14,15
    //*******************************
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80008bc:	4a9b      	ldr	r2, [pc, #620]	; (8000b2c <main+0x278>)
 80008be:	4b9b      	ldr	r3, [pc, #620]	; (8000b2c <main+0x278>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOD->MODER &= ~(0xFFU << 24);
 80008c8:	4a99      	ldr	r2, [pc, #612]	; (8000b30 <main+0x27c>)
 80008ca:	4b99      	ldr	r3, [pc, #612]	; (8000b30 <main+0x27c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008d2:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x55 << 24);
 80008d4:	4a96      	ldr	r2, [pc, #600]	; (8000b30 <main+0x27c>)
 80008d6:	4b96      	ldr	r3, [pc, #600]	; (8000b30 <main+0x27c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80008de:	6013      	str	r3, [r2, #0]
    GPIOD->ODR    = 0x0000;
 80008e0:	4b93      	ldr	r3, [pc, #588]	; (8000b30 <main+0x27c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]

    //*******************************
    // setup I2C - GPIOB 6, 9
    //*******************************
    // enable I2C clock
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80008e6:	4a91      	ldr	r2, [pc, #580]	; (8000b2c <main+0x278>)
 80008e8:	4b90      	ldr	r3, [pc, #576]	; (8000b2c <main+0x278>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80008f2:	4a8e      	ldr	r2, [pc, #568]	; (8000b2c <main+0x278>)
 80008f4:	4b8d      	ldr	r3, [pc, #564]	; (8000b2c <main+0x278>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB->MODER &= ~(3U << 6*2); // PB6
 80008fe:	4a8d      	ldr	r2, [pc, #564]	; (8000b34 <main+0x280>)
 8000900:	4b8c      	ldr	r3, [pc, #560]	; (8000b34 <main+0x280>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000908:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << 6*2); // AF
 800090a:	4a8a      	ldr	r2, [pc, #552]	; (8000b34 <main+0x280>)
 800090c:	4b89      	ldr	r3, [pc, #548]	; (8000b34 <main+0x280>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000914:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 6);   // open-drain
 8000916:	4a87      	ldr	r2, [pc, #540]	; (8000b34 <main+0x280>)
 8000918:	4b86      	ldr	r3, [pc, #536]	; (8000b34 <main+0x280>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	6053      	str	r3, [r2, #4]
    GPIOB->MODER &= ~(3U << 9*2); // PB9
 8000922:	4a84      	ldr	r2, [pc, #528]	; (8000b34 <main+0x280>)
 8000924:	4b83      	ldr	r3, [pc, #524]	; (8000b34 <main+0x280>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800092c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << 9*2); // AF
 800092e:	4a81      	ldr	r2, [pc, #516]	; (8000b34 <main+0x280>)
 8000930:	4b80      	ldr	r3, [pc, #512]	; (8000b34 <main+0x280>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000938:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 9);   // open-drain
 800093a:	4a7e      	ldr	r2, [pc, #504]	; (8000b34 <main+0x280>)
 800093c:	4b7d      	ldr	r3, [pc, #500]	; (8000b34 <main+0x280>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000944:	6053      	str	r3, [r2, #4]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << 6*4);     // for pin 6
 8000946:	4a7b      	ldr	r2, [pc, #492]	; (8000b34 <main+0x280>)
 8000948:	4b7a      	ldr	r3, [pc, #488]	; (8000b34 <main+0x280>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000950:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[1] |= (4 << (9-8)*4); // for pin 9
 8000952:	4a78      	ldr	r2, [pc, #480]	; (8000b34 <main+0x280>)
 8000954:	4b77      	ldr	r3, [pc, #476]	; (8000b34 <main+0x280>)
 8000956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	6253      	str	r3, [r2, #36]	; 0x24

    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 800095e:	4b76      	ldr	r3, [pc, #472]	; (8000b38 <main+0x284>)
 8000960:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000964:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000966:	4b74      	ldr	r3, [pc, #464]	; (8000b38 <main+0x284>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]

    I2C1->CR2 |= (I2C_CR2_ITERREN); // enable error interrupt
 800096c:	4a72      	ldr	r2, [pc, #456]	; (8000b38 <main+0x284>)
 800096e:	4b72      	ldr	r3, [pc, #456]	; (8000b38 <main+0x284>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	6053      	str	r3, [r2, #4]
    // we need 1/100kz = 10us clock speed
    // Thigh and Tlow needs to be 5us each
    // Let's pick fPCLK1 = 10Mhz, TPCLK1 = 1/10Mhz = 100ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 100ns
    // CCR = 50
    I2C1->CR2 |= (10 << 0); // 10Mhz periph clock
 8000978:	4a6f      	ldr	r2, [pc, #444]	; (8000b38 <main+0x284>)
 800097a:	4b6f      	ldr	r3, [pc, #444]	; (8000b38 <main+0x284>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f043 030a 	orr.w	r3, r3, #10
 8000982:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (50 << 0);
 8000984:	4a6c      	ldr	r2, [pc, #432]	; (8000b38 <main+0x284>)
 8000986:	4b6c      	ldr	r3, [pc, #432]	; (8000b38 <main+0x284>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 800098e:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / fPCLK1) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 100ns => (1000ns / 100ns) + 1= 10 + 1 = 11
    I2C1->TRISE |= (11 << 0); // program TRISE to 11 for 100khz
 8000990:	4a69      	ldr	r2, [pc, #420]	; (8000b38 <main+0x284>)
 8000992:	4b69      	ldr	r3, [pc, #420]	; (8000b38 <main+0x284>)
 8000994:	6a1b      	ldr	r3, [r3, #32]
 8000996:	f043 030b 	orr.w	r3, r3, #11
 800099a:	6213      	str	r3, [r2, #32]
    // set own address to 00 - not really used in master mode
    I2C1->OAR1 |= (0x00 << 1);
 800099c:	4a66      	ldr	r2, [pc, #408]	; (8000b38 <main+0x284>)
 800099e:	4b66      	ldr	r3, [pc, #408]	; (8000b38 <main+0x284>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	6093      	str	r3, [r2, #8]
    I2C1->OAR1 |= (1 << 14); // bit 14 should be kept at 1 according to the datasheet
 80009a4:	4a64      	ldr	r2, [pc, #400]	; (8000b38 <main+0x284>)
 80009a6:	4b64      	ldr	r3, [pc, #400]	; (8000b38 <main+0x284>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6093      	str	r3, [r2, #8]

    // enable error interrupt from NVIC
    NVIC_SetPriority(I2C1_ER_IRQn, 1);
 80009b0:	2020      	movs	r0, #32
 80009b2:	2101      	movs	r1, #1
 80009b4:	f7ff fc38 	bl	8000228 <__NVIC_SetPriority>
    NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009b8:	2020      	movs	r0, #32
 80009ba:	f7ff fc1b 	bl	80001f4 <__NVIC_EnableIRQ>

    I2C1->CR1 |= I2C_CR1_PE; // enable i2c
 80009be:	4a5e      	ldr	r2, [pc, #376]	; (8000b38 <main+0x284>)
 80009c0:	4b5d      	ldr	r3, [pc, #372]	; (8000b38 <main+0x284>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6013      	str	r3, [r2, #0]

    // audio PLL
    init_i2s_pll();
 80009ca:	f7ff fcf7 	bl	80003bc <init_i2s_pll>
    // audio out
    init_i2s3();
 80009ce:	f7ff fd15 	bl	80003fc <init_i2s3>
    // initialize audio dac
    init_cs43l22(0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fdc2 	bl	800055c <init_cs43l22>

    // read Chip ID - first 5 bits of CHIP_ID_ADDR
    uint8_t ret = i2c_read(CS43L22_REG_ID);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fca3 	bl	8000324 <i2c_read>
 80009de:	4603      	mov	r3, r0
 80009e0:	f88d 3007 	strb.w	r3, [sp, #7]

    if ((ret >> 3) != CS43L22_CHIP_ID) {
 80009e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b1c      	cmp	r3, #28
 80009ee:	d005      	beq.n	80009fc <main+0x148>
        GPIOD->ODR |= (1 << 13); // orange led on error
 80009f0:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <main+0x27c>)
 80009f2:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <main+0x27c>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009fa:	6153      	str	r3, [r2, #20]
    }

    // beep volume
    uint8_t vol = 7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_write(CS43L22_REG_BEEP_VOL_OFF_TIME, vol);
 8000a02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000a06:	201d      	movs	r0, #29
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f7ff fc53 	bl	80002b4 <i2c_write>

    //headphone volume
    i2c_write(CS43L22_REG_HEADPHONE_A_VOL, 0xC1);
 8000a0e:	2022      	movs	r0, #34	; 0x22
 8000a10:	21c1      	movs	r1, #193	; 0xc1
 8000a12:	f7ff fc4f 	bl	80002b4 <i2c_write>

    //Button set up
    // enable GPIOA clock (AHB1ENR: bit 0)
    RCC->AHB1ENR |= (1 << 0);
 8000a16:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <main+0x278>)
 8000a18:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <main+0x278>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= 0xFFFFFFFC;   // Reset bits 0-1 to clear old values
 8000a22:	4a46      	ldr	r2, [pc, #280]	; (8000b3c <main+0x288>)
 8000a24:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <main+0x288>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f023 0303 	bic.w	r3, r3, #3
 8000a2c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x00000000;   // Make button an input
 8000a2e:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <main+0x288>)
 8000a30:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <main+0x288>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6013      	str	r3, [r2, #0]

    SYSCFG->EXTICR[0] |= 0x00000000; // Write 0000 to map PA0 to EXTI0
 8000a36:	4a42      	ldr	r2, [pc, #264]	; (8000b40 <main+0x28c>)
 8000a38:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <main+0x28c>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	6093      	str	r3, [r2, #8]

    EXTI->RTSR |= 0x00001;   // Enable rising edge trigger on EXTI0 (tells you when button is pressed)
 8000a3e:	4a41      	ldr	r2, [pc, #260]	; (8000b44 <main+0x290>)
 8000a40:	4b40      	ldr	r3, [pc, #256]	; (8000b44 <main+0x290>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6093      	str	r3, [r2, #8]
    
    // Mask the used external interrupt numbers.
    EXTI->IMR |= 0x00001;    // Mask EXTI0
 8000a4a:	4a3e      	ldr	r2, [pc, #248]	; (8000b44 <main+0x290>)
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <main+0x290>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]


    // enable SYSCFG clock (APB2ENR: bit 14)
    RCC->APB2ENR |= (1 << 14);
 8000a56:	4a35      	ldr	r2, [pc, #212]	; (8000b2c <main+0x278>)
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <main+0x278>)
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44

    //Timers set up
    // enable TIM2 clock (bit 0)
    RCC->APB1ENR |= (1 << 0);
 8000a62:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <main+0x278>)
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <main+0x278>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40

    // TIM2 SET UP
    TIM2->PSC = 4999; //set TIM2 prescalar
 8000a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a72:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 5000; //set auto refil value to 0.5 seconds
 8000a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= (1 << 0); //enable TIM2 interrupt
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	60d3      	str	r3, [r2, #12]
    
    // enable TIM3 clock (bit 1)
    RCC->APB1ENR |= (1 << 1);
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <main+0x278>)
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <main+0x278>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40

    //TIM3 Set up
    TIM3->PSC = 4999; //set TIM3 prescalar
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <main+0x294>)
 8000aa0:	f241 3287 	movw	r2, #4999	; 0x1387
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 3000; //set auto refil value to 0.3 seconds
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <main+0x294>)
 8000aa8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->DIER |= (1 << 0);  //enable TIM3 interrupt
 8000aae:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <main+0x294>)
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <main+0x294>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	60d3      	str	r3, [r2, #12]

    // enable TIM4 clock (bit 2)
    RCC->APB1ENR |= (1 << 2);
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <main+0x278>)
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <main+0x278>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40

    TIM4->PSC = 4999; //set TIM4 prescalar
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <main+0x298>)
 8000ac8:	f241 3287 	movw	r2, #4999	; 0x1387
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = 100; //set auto refil value to 10 ms
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <main+0x298>)
 8000ad0:	2264      	movs	r2, #100	; 0x64
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->DIER |= (1 << 0);  //enable TIM4 interrupt
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <main+0x298>)
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <main+0x298>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	60d3      	str	r3, [r2, #12]


    // Set Priority for each interrupt request
    NVIC_SetPriority(EXTI0_IRQn, 1); // Priority level 1
 8000ae0:	2006      	movs	r0, #6
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f7ff fba0 	bl	8000228 <__NVIC_SetPriority>
    // enable EXT0 IRQ from NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000ae8:	2006      	movs	r0, #6
 8000aea:	f7ff fb83 	bl	80001f4 <__NVIC_EnableIRQ>

    NVIC_SetPriority(TIM2_IRQn, 2); // Priority level 2
 8000aee:	201c      	movs	r0, #28
 8000af0:	2102      	movs	r1, #2
 8000af2:	f7ff fb99 	bl	8000228 <__NVIC_SetPriority>
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8000af6:	201c      	movs	r0, #28
 8000af8:	f7ff fb7c 	bl	80001f4 <__NVIC_EnableIRQ>

    NVIC_SetPriority(TIM3_IRQn, 3); // Priority level 3
 8000afc:	201d      	movs	r0, #29
 8000afe:	2103      	movs	r1, #3
 8000b00:	f7ff fb92 	bl	8000228 <__NVIC_SetPriority>
    // enable TIM3 IRQ from NVIC
    NVIC_EnableIRQ(TIM3_IRQn);
 8000b04:	201d      	movs	r0, #29
 8000b06:	f7ff fb75 	bl	80001f4 <__NVIC_EnableIRQ>

    NVIC_SetPriority(TIM4_IRQn, 3); // Priority level 3
 8000b0a:	201e      	movs	r0, #30
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	f7ff fb8b 	bl	8000228 <__NVIC_SetPriority>
    // enable TIM4 IRQ from NVIC
    NVIC_EnableIRQ(TIM4_IRQn);
 8000b12:	201e      	movs	r0, #30
 8000b14:	f7ff fb6e 	bl	80001f4 <__NVIC_EnableIRQ>

    // Enable Timer 2 module (CEN, bit0)
    TIM2->CR1 |= (1 << 0);
 8000b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]
    
    while(1)
    {
    }
 8000b28:	e7fe      	b.n	8000b28 <main+0x274>
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40013800 	.word	0x40013800
 8000b44:	40013c00 	.word	0x40013c00
 8000b48:	40000400 	.word	0x40000400
 8000b4c:	40000800 	.word	0x40000800

08000b50 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <SystemInit+0x4c>)
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <SystemInit+0x4c>)
 8000b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <SystemInit+0x50>)
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x50>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <SystemInit+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <SystemInit+0x50>)
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SystemInit+0x50>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <SystemInit+0x50>)
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <SystemInit+0x54>)
 8000b86:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x50>)
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SystemInit+0x50>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b92:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <SystemInit+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
}
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	24003010 	.word	0x24003010

08000ba8 <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 8000bb4:	bf00      	nop
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f9      	beq.n	8000bb6 <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <set_sysclk_to_100+0xac>)
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <set_sysclk_to_100+0xac>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 8000bda:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 8000be2:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000bec:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf8:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000bfc:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <set_sysclk_to_100+0xb0>)
 8000bfe:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c0a:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8000c0c:	bf00      	nop
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f9      	beq.n	8000c0e <set_sysclk_to_100+0x66>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <set_sysclk_to_100+0xb4>)
 8000c1c:	f240 7205 	movw	r2, #1797	; 0x705
 8000c20:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f023 0303 	bic.w	r3, r3, #3
 8000c2c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8000c3a:	bf00      	nop
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <set_sysclk_to_100+0xa8>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0f9      	beq.n	8000c3c <set_sysclk_to_100+0x94>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <set_sysclk_to_100+0xb8>)
 8000c4a:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <set_sysclk_to_100+0xbc>)
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	4770      	bx	lr
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000
 8000c58:	07416408 	.word	0x07416408
 8000c5c:	40023c00 	.word	0x40023c00
 8000c60:	20000010 	.word	0x20000010
 8000c64:	05f5e100 	.word	0x05f5e100

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6e:	e003      	b.n	8000c78 <LoopCopyDataInit>

08000c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c76:	3104      	adds	r1, #4

08000c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c80:	d3f6      	bcc.n	8000c70 <CopyDataInit>
  ldr  r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c84:	e002      	b.n	8000c8c <LoopFillZerobss>

08000c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c88:	f842 3b04 	str.w	r3, [r2], #4

08000c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c90:	d3f9      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ff5d 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f000 f811 	bl	8000cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fe0b 	bl	80008b4 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000ca4:	08000d28 	.word	0x08000d28
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cac:	20000014 	.word	0x20000014
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000cb0:	20000014 	.word	0x20000014
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cb4:	20000038 	.word	0x20000038

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <__libc_init_array>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <__libc_init_array+0x3c>)
 8000cc0:	4c0e      	ldr	r4, [pc, #56]	; (8000cfc <__libc_init_array+0x40>)
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	10a4      	asrs	r4, r4, #2
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	461e      	mov	r6, r3
 8000cca:	42a5      	cmp	r5, r4
 8000ccc:	d004      	beq.n	8000cd8 <__libc_init_array+0x1c>
 8000cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cd2:	4798      	blx	r3
 8000cd4:	3501      	adds	r5, #1
 8000cd6:	e7f8      	b.n	8000cca <__libc_init_array+0xe>
 8000cd8:	f000 f816 	bl	8000d08 <_init>
 8000cdc:	4c08      	ldr	r4, [pc, #32]	; (8000d00 <__libc_init_array+0x44>)
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <__libc_init_array+0x48>)
 8000ce0:	1ae4      	subs	r4, r4, r3
 8000ce2:	10a4      	asrs	r4, r4, #2
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	461e      	mov	r6, r3
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	d004      	beq.n	8000cf6 <__libc_init_array+0x3a>
 8000cec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cf0:	4798      	blx	r3
 8000cf2:	3501      	adds	r5, #1
 8000cf4:	e7f8      	b.n	8000ce8 <__libc_init_array+0x2c>
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	08000d20 	.word	0x08000d20
 8000cfc:	08000d20 	.word	0x08000d20
 8000d00:	08000d24 	.word	0x08000d24
 8000d04:	08000d20 	.word	0x08000d20

08000d08 <_init>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr

08000d14 <_fini>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr
